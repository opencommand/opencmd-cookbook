version: "1.0.0"
commands:
  - name: git
    description: |
      Git is a fast, scalable, distributed revision control system with
      an unusually rich command set that provides both high-level
      operations and full access to internals.
    options:
      - name: version
        description: Prints the Git suite version that the git program came from.
        alias: [-v, --version]
        type: bool
    commands:
      - name: add
        synopsis: git add [options] [--] <pathspec>...
        short: Add file contents to the index
        long: |
          This command updates the index using the current content found in
          the working tree, to prepare the content staged for the next
          commit. It typically adds the current content of existing paths as
          a whole, but with some options it can also be used to add content
          with only part of the changes made to the working tree files
          applied, or remove paths that do not exist in the working tree
          anymore.

          The "index" holds a snapshot of the content of the working tree,
          and it is this snapshot that is taken as the contents of the next
          commit. Thus after making any changes to the working tree, and
          before running the commit command, you must use the add command to
          add any new or modified files to the index.

          This command can be performed multiple times before a commit. It
          only adds the content of the specified file(s) at the time the add
          command is run; if you want subsequent changes included in the
          next commit, then you must run git add again to add the new
          content to the index.

          The git status command can be used to obtain a summary of which
          files have changes that are staged for the next commit.

          The git add command will not add ignored files by default. If any
          ignored files were explicitly specified on the command line, git
          add will fail with a list of ignored files. Ignored files reached
          by directory recursion or filename globbing performed by Git
          (quote your globs before the shell) will be silently ignored. The
          git add command can be used to add ignored files with the -f
          (force) option.
        options:
          - name: dry_run
            description: |
              Don’t actually add the file(s), just show if they exist and/or
              will be ignored.
            alias: [-n, --dry-run]
            type: bool
          - name: force
            description: Allow adding otherwise ignored files.
            alias: [-f, --force]
            type: bool
      - name: am

      - name: archive

      - name: bisect

      - name: branch

      - name: clone
        short: Clone a repository into a new directory
        long: |
          Clones a repository into a newly created directory, creates
          remote-tracking branches for each branch in the cloned repository
          (visible using git branch --remotes), and creates and checks out
          an initial branch that is forked from the cloned repository’s
          currently active branch.

          After the clone, a plain git fetch without arguments will update
          all the remote-tracking branches, and a git pull without arguments
          will in addition merge the remote master branch into the current
          master branch, if any (this is untrue when --single-branch is
          given; see below).

          This default configuration is achieved by creating references to
          the remote branch heads under refs/remotes/origin and by
          initializing remote.origin.url and remote.origin.fetch
          configuration variables.
        synopsis: |
          git clone [--template=<template-directory>]
          [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]
          [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]
          [--dissociate] [--separate-git-dir <git-dir>]
          [--depth <depth>] [--[no-]single-branch] [--no-tags]
          [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]
          [--[no-]remote-submodules] [--jobs <n>] [--sparse] [--[no-]reject-shallow]
          [--filter=<filter-spec>] [--also-filter-submodules]] [--] <repository>
          [<directory>]
        examples:
          - |
            Clone from upstream:
               $ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux
               $ cd my-linux
               $ make
          - |
            Make a local clone that borrows from the current directory,
            without checking things out:
               $ git clone -l -s -n . ../copy
               $ cd ../copy
               $ git show-branch
        options:
definitions:
  - name: GIT_URL
    type: str
    description: |
      In general, URLs contain information about the transport protocol,
       the address of the remote server, and the path to the repository.
       Depending on the transport protocol, some of this information may
       be absent.

       Git supports ssh, git, http, and https protocols (in addition, ftp
       and ftps can be used for fetching, but this is inefficient and
       deprecated; do not use them).

       The native transport (i.e. git:// URL) does no authentication and
       should be used with caution on unsecured networks.

       The following syntaxes may be used with them:

       •   ssh://[<user>@]<host>[:<port>]/<path-to-git-repo>

       •   git://<host>[:<port>]/<path-to-git-repo>

       •   http[s]://<host>[:<port>]/<path-to-git-repo>

       •   ftp[s]://<host>[:<port>]/<path-to-git-repo>

       An alternative scp-like syntax may also be used with the ssh
       protocol:

       •   [<user>@]<host>:/<path-to-git-repo>

       This syntax is only recognized if there are no slashes before the
       first colon. This helps differentiate a local path that contains a
       colon. For example the local path foo:bar could be specified as an
       absolute path or ./foo:bar to avoid being misinterpreted as an ssh
       url.

       The ssh and git protocols additionally support ~<username>
       expansion:

       •   ssh://[<user>@]<host>[:<port>]/~<user>/<path-to-git-repo>

       •   git://<host>[:<port>]/~<user>/<path-to-git-repo>

       •   [<user>@]<host>:~<user>/<path-to-git-repo>

       For local repositories, also supported by Git natively, the
       following syntaxes may be used:

       •   /path/to/repo.git/

       •   file:///path/to/repo.git/

       These two syntaxes are mostly equivalent, except the former
       implies --local option.

       git clone, git fetch and git pull, but not git push, will also
       accept a suitable bundle file. See git-bundle(1).

       When Git doesn’t know how to handle a certain transport protocol,
       it attempts to use the remote-<transport> remote helper, if one
       exists. To explicitly request a remote helper, the following
       syntax may be used:

       •   <transport>::<address>

       where <address> may be a path, a server and path, or an arbitrary
       URL-like string recognized by the specific remote helper being
       invoked. See gitremote-helpers(7) for details.

       If there are a large number of similarly-named remote repositories
       and you want to use a different format for them (such that the
       URLs you use will be rewritten into URLs that work), you can
       create a configuration section of the form:

                   [url "<actual-url-base>"]
                           insteadOf = <other-url-base>

       For example, with this:

                   [url "git://git.host.xz/"]
                           insteadOf = host.xz:/path/to/
                           insteadOf = work:

       a URL like "work:repo.git" or like "host.xz:/path/to/repo.git"
       will be rewritten in any context that takes a URL to be
       "git://git.host.xz/repo.git".

       If you want to rewrite URLs for push only, you can create a
       configuration section of the form:

                   [url "<actual-url-base>"]
                           pushInsteadOf = <other-url-base>

       For example, with this:

                   [url "ssh://example.org/"]
                           pushInsteadOf = git://example.org/

       a URL like "git://example.org/path/to/repo.git" will be rewritten
       to "ssh://example.org/path/to/repo.git" for pushes, but pulls will
       still use the original URL.
tags:
  - windows
  - posix
  - git
groups:
  - GUIDES
  - CONFIGURATION
  - 